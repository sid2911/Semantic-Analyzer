package A3;

import java.util.Hashtable;
import java.util.Stack;
import java.util.Vector;

import A2.Parser;

public class SemanticAnalyzer {
	static Gui gui;
	Stack<String> s=new Stack<String>();
	private static int PLUS=0;
	private static int MINUS=0;
	private static int MUL=0;
	private static int DIV=0;
	private static int EQ=3;
	private static int Int=0;
	private static int Float=1;
	private static int Char=2;
	private static int STRING=3;
	private static int Boolean=4;
	private static int Void=5;
	private static int err=-1;
	private static int OK=6;
	private static int cube[][][]={{{ 0, 1,-1, 3,-1,-1},
									{ 1, 1,-1, 3,-1,-1},
									{-1,-1,-1, 3,-1,-1},
									{ 3, 3, 3, 3, 3,-1},
									{-1,-1,-1, 3,-1,-1},
									{-1,-1,-1,-1,-1,-1}},
								{	{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1, 4,-1},
									{-1,-1,-1,-1,-1,-1}},
								{	{ 4, 4,-1,-1,-1,-1},
									{ 4, 4,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1},
									{-1,-1,-1,-1,-1,-1}},
								{	{ 6,-1,-1,-1,-1,-1},
									{ 6, 6,-1,-1,-1,-1},
									{-1,-1, 6,-1,-1,-1},
									{-1,-1,-1, 6,-1,-1},
									{-1,-1,-1,-1, 6,-1},
									{-1,-1,-1,-1,-1, 6}}};
  
  private static final Hashtable<String, Vector<SymbolTableItem>> symbolTable = new Hashtable<String, Vector<SymbolTableItem>>();
  private static final Stack<String> stack = new Stack<String>();
  
  // create here a data structure for the cube of types
  
  public static Hashtable<String, Vector<SymbolTableItem>> getSymbolTable() {
    return symbolTable;
  }
  
  public static void checkVariable(String type, String id) {
   
   
    // A. search the id in the symbol table

    // B. if !exist then insert: type, scope=global, value={0, false, "", '')
	if(!symbolTable.containsKey(id)){
		System.out.println("Original");
    Vector v = new Vector();
    v.add(new SymbolTableItem(type,"global", ""));
    symbolTable.put(id, v);
	}
	else
	{
		System.out.println("Duplicate");
		int n= Parser.getLineNum();
		error(Parser.gui,1,n);
	}
	
		
    // C. else error: “variable id is already defined”
  }

  public static void pushStack(String type) {
  
    // push type in the stack
	  System.out.println("Stack Before Pushing: "+stack);
	 stack.push(type);
	 System.out.println("current stack" +stack);
	  
	  
  }
  
  public String popStack() {
    String result="";
    // pop a value from the stack
    if(!stack.isEmpty())
    result=stack.pop();
    return result;
  }
  
  
  public String calculateCube(String type, String operator) {
    String result="";
    // unary operator ( - and !)
    return result;
  }

  public String calculateCube(String type1, String type2, String operator) {
    String result="";
    System.out.println("type: " +type1);
    int t1=0,t2=0,op=0;
    if(type1.equals("INTEGER"))
    	t1=Int;
    else if(type1.equals("FLOAT"))
    	t1=Float;
    else if(type1.equals("CHARACTER"))
    	t1=Char;
    else if(type1.equals("STRING"))
    	t1=STRING;
    else if(type1.equals("BOOLEAN"))
    	t1=Char;
    else if(type1.equals("VOID"))
    	t1=Void;
   
    	
    	Vector v=new Vector();
    	//
   //type1=symbolTable.get(type1).firstElement().getType();
    	t2=Int;
    System.out.println("operator= "+operator);
    if(operator.equals("+"))
    	op=PLUS;
    if(operator.equals("-"))
    	op=MINUS;
    if(operator.equals("*"))
    	op=MUL;
    if(operator.equals("/"))
    	op=DIV;
    if(operator.equals("="))
    	op=EQ;
  
      // binary operator ( - and !)
    int res=cube[op][t1][t2];
    System.out.println("cube= "+cube[3][0][0]);
    System.out.println("res= "+res);
    if(res==0)
    	result="INTEGER";
    if(res==1)
    	result="FLOAT";
    if(res==3)
    	result="STRING";
    if(res==4)
    	result="BOOLEAN";
    if(res==-1)
    	result="ERROR";
    if(res==6)
    	result="OK";
    return result;
  }
  
  private static void error(Gui gui, int err, int n) {
    switch (err) {
      case 1: 
        gui.writeConsole("Line" + n + ": variable id is already defined"); 
        break;
      case 2: 
        gui.writeConsole("Line" + n + ": incompatible types: type mismatch"); 
        break;
      case 3: 
        gui.writeConsole("Line" + n + ": incompatible types: expected boolean"); 
        break;

    }
  }
  
}
